/*
 *                       Yeppp! library implementation
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                  part of the Yeppp! library infrastructure
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * See library/LICENSE.txt for the full text of the license.
 */

package info.yeppp;

/** @brief	Vector mathematical functions. */
public class Math {
	static {
		System.loadLibrary("yeppp");
		System.loadLibrary("yeppp-jni");
	}

	/** @name	Natural Logarithm */
	/**@{*/
	/**
	 * @brief	Computes logarithm on double-precision (64-bit) floating-point elements.
	 * @param[in]	xArray	Input array.
	 * @param[in]   xOffset Offset of the first element in @a xArray.
	 * @param[out]	yArray	Output array.
	 * @param[in]   yOffset Offset of the first element in @a yArray.
	 * @param[in]	length	The length of the subarrays to be used in computation.
	 * @throws	NullPointerException	If @a xArray or @a yArray argument is null.
	 * @throws	InvalidArgumentException	If the @a xOffset or @a yOffset argument is negative.
	 * @throws	NegativeArraySizeException	If the @a length argument is null.
	 * @throws  IndexOutOfBoundsException If @a xOffset + @a length exceeds the length of @a xArray array or @a yOffset + @a length exceeds the length of @a yArray array.
	 * @throws	MisalignedPointerError	If one of the arrays is not properly aligned.
	 */
	public static native void Log_V64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


	/** @name	Base-e Exponent */
	/**@{*/
	/**
	 * @brief	Computes exponent on double-precision (64-bit) floating-point elements.
	 * @param[in]	xArray	Input array.
	 * @param[in]   xOffset Offset of the first element in @a xArray.
	 * @param[out]	yArray	Output array.
	 * @param[in]   yOffset Offset of the first element in @a yArray.
	 * @param[in]	length	The length of the subarrays to be used in computation.
	 * @throws	NullPointerException	If @a xArray or @a yArray argument is null.
	 * @throws	InvalidArgumentException	If the @a xOffset or @a yOffset argument is negative.
	 * @throws	NegativeArraySizeException	If the @a length argument is null.
	 * @throws  IndexOutOfBoundsException If @a xOffset + @a length exceeds the length of @a xArray array or @a yOffset + @a length exceeds the length of @a yArray array.
	 * @throws	MisalignedPointerError	If one of the arrays is not properly aligned.
	 */
	public static native void Exp_V64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


	/** @name	Sine */
	/**@{*/
	/**
	 * @brief	Computes sine on double-precision (64-bit) floating-point elements.
	 * @param[in]	xArray	Input array.
	 * @param[in]   xOffset Offset of the first element in @a xArray.
	 * @param[out]	yArray	Output array.
	 * @param[in]   yOffset Offset of the first element in @a yArray.
	 * @param[in]	length	The length of the subarrays to be used in computation.
	 * @throws	NullPointerException	If @a xArray or @a yArray argument is null.
	 * @throws	InvalidArgumentException	If the @a xOffset or @a yOffset argument is negative.
	 * @throws	NegativeArraySizeException	If the @a length argument is null.
	 * @throws  IndexOutOfBoundsException If @a xOffset + @a length exceeds the length of @a xArray array or @a yOffset + @a length exceeds the length of @a yArray array.
	 * @throws	MisalignedPointerError	If one of the arrays is not properly aligned.
	 */
	public static native void Sin_V64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


	/** @name	Tangent */
	/**@{*/
	/**
	 * @brief	Computes tangent on double-precision (64-bit) floating-point elements.
	 * @param[in]	xArray	Input array.
	 * @param[in]   xOffset Offset of the first element in @a xArray.
	 * @param[out]	yArray	Output array.
	 * @param[in]   yOffset Offset of the first element in @a yArray.
	 * @param[in]	length	The length of the subarrays to be used in computation.
	 * @throws	NullPointerException	If @a xArray or @a yArray argument is null.
	 * @throws	InvalidArgumentException	If the @a xOffset or @a yOffset argument is negative.
	 * @throws	NegativeArraySizeException	If the @a length argument is null.
	 * @throws  IndexOutOfBoundsException If @a xOffset + @a length exceeds the length of @a xArray array or @a yOffset + @a length exceeds the length of @a yArray array.
	 * @throws	MisalignedPointerError	If one of the arrays is not properly aligned.
	 */
	public static native void Tan_V64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


}
