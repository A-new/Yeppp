/*
 *                       Yeppp! library implementation
 *                   This file is auto-generated by Peach-Py,
 *        Portable Efficient Assembly Code-generator in Higher-level Python,
 *                  part of the Yeppp! library infrastructure
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * See library/LICENSE.txt for the full text of the license.
 */

package info.yeppp;

/** @brief	Basic arithmetic operations. */
public class Core {
	static {
		System.loadLibrary("yeppp");
		System.loadLibrary("yeppp-jni");
	}

	/** @name	Vector addition */
	/**@{*/
	public static native void Add_V8uV8u_V8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] sumArray, int sumOffset, int length);
	public static native void Add_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	public static native void Add_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	public static native void Add_V16uV16u_V16u(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] sumArray, int sumOffset, int length);
	public static native void Add_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	public static native void Add_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	public static native void Add_V32uV32u_V32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] sumArray, int sumOffset, int length);
	public static native void Add_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	public static native void Add_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	public static native void Add_V64uV64u_V64u(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] sumArray, int sumOffset, int length);
	public static native void Add_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] sumArray, int sumOffset, int length);
	public static native void Add_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] sumArray, int sumOffset, int length);
	/**@}*/


	/** @name	Vector subtraction */
	/**@{*/
	public static native void Subtract_V8uV8u_V8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V16uV16u_V16u(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V32uV32u_V32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V64uV64u_V64u(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] differenceArray, int differenceOffset, int length);
	public static native void Subtract_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] differenceArray, int differenceOffset, int length);
	/**@}*/


	/** @name	Vector elementwise multiplication */
	/**@{*/
	public static native void Multiply_V8uV8u_V8u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, byte[] productArray, int productOffset, int length);
	public static native void Multiply_V8uV8u_V16u(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	public static native void Multiply_V8sV8s_V16s(byte[] xArray, int xOffset, byte[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	public static native void Multiply_V16uV16u_V16u(short[] xArray, int xOffset, short[] yArray, int yOffset, short[] productArray, int productOffset, int length);
	public static native void Multiply_V16uV16u_V32u(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	public static native void Multiply_V16sV16s_V32s(short[] xArray, int xOffset, short[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	public static native void Multiply_V32uV32u_V32u(int[] xArray, int xOffset, int[] yArray, int yOffset, int[] productArray, int productOffset, int length);
	public static native void Multiply_V32uV32u_V64u(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	public static native void Multiply_V32sV32s_V64s(int[] xArray, int xOffset, int[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	public static native void Multiply_V64uV64u_V64u(long[] xArray, int xOffset, long[] yArray, int yOffset, long[] productArray, int productOffset, int length);
	public static native void Multiply_V32fV32f_V32f(float[] xArray, int xOffset, float[] yArray, int yOffset, float[] productArray, int productOffset, int length);
	public static native void Multiply_V64fV64f_V64f(double[] xArray, int xOffset, double[] yArray, int yOffset, double[] productArray, int productOffset, int length);
	/**@}*/


	/** @name	Dot product */
	/**@{*/
	public static native float DotProduct_V32fV32f_S32f(float[] xArray, int xOffset, float[] yArray, int yOffset, int length);
	public static native double DotProduct_V64fV64f_S64f(double[] xArray, int xOffset, double[] yArray, int yOffset, int length);
	/**@}*/


	/** @name	Summation of squares (squared L2 norm) */
	/**@{*/
	public static native float SumSquares_V32f_S32f(float[] numberArray, int numberOffset, int length);
	public static native double SumSquares_V64f_S64f(double[] numberArray, int numberOffset, int length);
	/**@}*/


}
